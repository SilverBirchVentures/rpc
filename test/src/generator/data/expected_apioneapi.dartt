// This is a generated file (see the discoveryapis_generator project).

// ignore_for_file: unnecessary_cast

library rpc_generator_test.apiOneApi.client;

import 'dart:core' as core;
import 'dart:async' as async;
import 'dart:convert' as convert;

import 'package:_discoveryapis_commons/_discoveryapis_commons.dart' as commons;
import 'package:http/http.dart' as http;
import 'package:rpc_generator_test/multipleApisMessages.dart';
export 'package:_discoveryapis_commons/_discoveryapis_commons.dart'
    show ApiRequestError, DetailedApiRequestError;

const core.String USER_AGENT = 'dart-api-client apiOneApi/0.1';

class ApiOneApi {
  final commons.ApiRequester _requester;

  ApiOneApi(http.Client client,
      {core.String rootUrl: "http://localhost:8080/",
      core.String servicePath: "apiOneApi/0.1/"})
      : _requester =
            new commons.ApiRequester(client, rootUrl, servicePath, USER_AGENT);

  /// Request parameters:
  ///
  /// [name] - Path parameter: 'name'.
  ///
  /// [age] - Path parameter: 'age'.
  ///
  /// Completes with a [ApiOneResponse].
  ///
  /// Completes with a [commons.ApiRequestError] if the API endpoint returned an
  /// error.
  ///
  /// If the used [http.Client] completes with an error when making a REST call,
  /// this method will complete with the same error.
  async.Future<ApiOneResponse> apiOneGetWithParams(
      core.String name, core.int age) {
    var _url = null;
    var _queryParams = new core.Map<core.String, core.List<core.String>>();
    var _uploadMedia = null;
    var _uploadOptions = null;
    var _downloadOptions = commons.DownloadOptions.Metadata;
    var _body = null;

    if (name == null) {
      throw new core.ArgumentError("Parameter name is required.");
    }
    if (age == null) {
      throw new core.ArgumentError("Parameter age is required.");
    }

    _url = 'apione/' +
        commons.Escaper.ecapeVariable('$name') +
        '/age/' +
        commons.Escaper.ecapeVariable('$age');

    var _response = _requester.request(_url, "GET",
        body: _body,
        queryParams: _queryParams,
        uploadOptions: _uploadOptions,
        uploadMedia: _uploadMedia,
        downloadOptions: _downloadOptions);
    return _response.then((data) => ApiOneResponseFactory.fromJson(data));
  }

  /// [request] - The metadata request object.
  ///
  /// Request parameters:
  ///
  /// Completes with a [ApiOneResponse].
  ///
  /// Completes with a [commons.ApiRequestError] if the API endpoint returned an
  /// error.
  ///
  /// If the used [http.Client] completes with an error when making a REST call,
  /// this method will complete with the same error.
  async.Future<ApiOneResponse> apiOnePost(ApiOneRequest request) {
    var _url = null;
    var _queryParams = new core.Map<core.String, core.List<core.String>>();
    var _uploadMedia = null;
    var _uploadOptions = null;
    var _downloadOptions = commons.DownloadOptions.Metadata;
    var _body = null;

    if (request != null) {
      _body = convert.json.encode(ApiOneRequestFactory.toJson(request));
    }

    _url = 'apione/post';

    var _response = _requester.request(_url, "POST",
        body: _body,
        queryParams: _queryParams,
        uploadOptions: _uploadOptions,
        uploadMedia: _uploadMedia,
        downloadOptions: _downloadOptions);
    return _response.then((data) => ApiOneResponseFactory.fromJson(data));
  }

  /// Request parameters:
  ///
  /// Completes with a [ApiOneResponse].
  ///
  /// Completes with a [commons.ApiRequestError] if the API endpoint returned an
  /// error.
  ///
  /// If the used [http.Client] completes with an error when making a REST call,
  /// this method will complete with the same error.
  async.Future<ApiOneResponse> hello() {
    var _url = null;
    var _queryParams = new core.Map<core.String, core.List<core.String>>();
    var _uploadMedia = null;
    var _uploadOptions = null;
    var _downloadOptions = commons.DownloadOptions.Metadata;
    var _body = null;

    _url = 'apione';

    var _response = _requester.request(_url, "GET",
        body: _body,
        queryParams: _queryParams,
        uploadOptions: _uploadOptions,
        uploadMedia: _uploadMedia,
        downloadOptions: _downloadOptions);
    return _response.then((data) => ApiOneResponseFactory.fromJson(data));
  }
}

class ApiOneRequestFactory {
  static ApiOneRequest fromJson(core.Map _json) {
    var message = new ApiOneRequest();
    if (_json.containsKey("age")) {
      message.age = _json["age"];
    }
    if (_json.containsKey("name")) {
      message.name = _json["name"];
    }
    return message;
  }

  static core.Map toJson(ApiOneRequest message) {
    var _json = new core.Map();
    if (message.age != null) {
      _json["age"] = message.age;
    }
    if (message.name != null) {
      _json["name"] = message.name;
    }
    return _json;
  }
}

class ApiOneResponseFactory {
  static ApiOneResponse fromJson(core.Map _json) {
    var message = new ApiOneResponse();
    if (_json.containsKey("result")) {
      message.result = _json["result"];
    }
    return message;
  }

  static core.Map toJson(ApiOneResponse message) {
    var _json = new core.Map();
    if (message.result != null) {
      _json["result"] = message.result;
    }
    return _json;
  }
}
